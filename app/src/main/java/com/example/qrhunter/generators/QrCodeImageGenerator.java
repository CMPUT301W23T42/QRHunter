package com.example.qrhunter.generators;

import android.graphics.drawable.Drawable;
import android.media.Image;
import android.widget.ImageView;

import androidx.appcompat.app.AppCompatActivity;

import com.example.qrhunter.R;

/***
 * This class handles QRCode image generation
 */
public class QrCodeImageGenerator extends AppCompatActivity implements QrCodeRepresentative{
    protected  int [] drawableFrames = {R.drawable.frame_black, R.drawable.frame_red, R.drawable.frame_green, R.drawable.frame_blue};
    protected  int [] drawableRests = {R.drawable.rest_black, R.drawable.rest_red, R.drawable.rest_green, R.drawable.rest_blue};
    protected int [] drawableSquares = {R.drawable.square_black, R.drawable.square_red, R.drawable.square_green, R.drawable.square_blue};
    protected final int imageNumber = 3;

    /***
     * This method takes in a hex string and three ImageViews.
     * The QRCode image is formed by combinging the three image views,
     * the frame, the square and the rest. Each imageview can only represent
     * one drawable image so three images are needed to create this drawing.
     * The method uses the bit_string generated by hex_to_string of the hash
     * to assign the ImageViews provided different options.
     * There are currently 4^3 = 64 possible permutations of images.
     * @param hex_string: The QRCode hash
     * @param imgFrame: The 'frame' image to change
     * @param imgRest: The 'rest' image to change
     * @param imgSquare: The 'square' image to change
     */
    public void setQRCodeImage(String hex_string, ImageView imgFrame, ImageView imgRest, ImageView imgSquare) {
        String bit_string = hex_to_bit(hex_string);

        for (int i = 0; i < imageNumber; i++) {
            char firstChar = bit_string.charAt(2*i);
            char secondChar = bit_string.charAt(2*i+1);
            int index = Character.getNumericValue(firstChar) + 2*Character.getNumericValue(secondChar);
            switch (i) {
                case 0:
                    imgFrame.setImageResource(drawableFrames[index]);
                    break;
                case 1:
                    imgRest.setImageResource(drawableRests[index]);
                    break;
                case 2:
                    imgSquare.setImageResource(drawableSquares[index]);
                    break;
            }

        }


    }
    /***
     * Converts a hexadecimal string into a bitstring of @maxBits
     * @param hex_string
     * @return bit_string
     */
    public String hex_to_bit(String hex_string) {
        String bit_string = "";
        int i = 0;
        int maxBits = 6;
        while(i<(maxBits-maxBits %4)/4+1) {
            char fixedChar = hex_string.charAt(i);
            String byteString = (Integer.toBinaryString(Character.getNumericValue(fixedChar)));
            while (byteString.length() < 4) {
                byteString = "0".concat(byteString);
            }
            bit_string = bit_string.concat(byteString);
            i ++;
        }
        return bit_string;
    }

}
