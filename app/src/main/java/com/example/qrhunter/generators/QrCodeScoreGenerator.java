package com.example.qrhunter.generators;

/**
 * This class handles QRCode score generation
 */
public class QrCodeScoreGenerator {
    /***
     * Generates the score of a QRCode by counting repeated characters in a sha-256 hash
     * and adding the sums of the powers of the value of that hash
     * Example: hash = 25cce1b3f4ff0cee487dddddd029041014cf695b85daff02652fab7d308dc802
     * Repeats: c:2, f:2, e:2, d:6, f:2
     * Sum repeat values by power-1: 12^1+15^1+14^1+13^5+15^1 = 371349
     * @param hash: SHA-256. Generated by the contents of the qrcode within scanner
     * @return score
     */
    public int score_algorithm(String hash) {
        int score = 0;
        int i = 0;
        while (i < hash.length()-1) {
            char fixedChar = hash.charAt(i);
            int j = 1; // Number of repeats of character
            while ( (i+j) < hash.length() && fixedChar == hash.charAt(i+j)) { // Next char = current char
                j ++;
            }
            if (j > 1) { // Value repeats more than once
                int val;
                if (fixedChar != '0') {
                    val = Character.getNumericValue(fixedChar); // Gets value of non zero
                } else {
                    val = 20; // 0 Has special value of 20
                }
                if (j < 5) { // Arbitrary number to prevent overflow
                    score += Math.pow(val, j-1);
                } else { // Prevents overflow. EG hash = "FFFFF ... FF" would have score 15^64.
                    score += Math.pow(val, 5);
                }
            }
            i += j;
        }
        return score;
    }
}
